/*
Copyright (c) 2018, TeleCommunication Systems, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the TeleCommunication Systems, Inc., nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
DISCLAIMED. IN NO EVENT SHALL TELECOMMUNICATION SYSTEMS, INC.BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*!--------------------------------------------------------------------------
  @file        GenericTileCallback.h

  This file provide GenericLayerCallback and GenericTileCallback classes.
  They are composed by LayerManger. LayerManager used these callbacks to find
  a chance to call all callbacks registered for specific Tile on specific
  layer.
*/
/*
   (C) Copyright 2012 by TeleCommunications Systems, Inc.

   The information contained herein is confidential, proprietary to
   TeleCommunication Systems, Inc., and considered a trade secret as defined
   in section 499C of the penal code of the State of California. Use of this
   information by anyone other than authorized employees of TeleCommunication
   Systems is granted only under a written non-disclosure agreement, expressly
   prescribing the scope and manner of such use.

 --------------------------------------------------------------------------*/
 /*! @{ */

#ifndef _GENERICTILECALLBACK_H_
#define _GENERICTILECALLBACK_H_

#include "AsyncCallback.h"
#include "nbcontext.h"
#include "Layer.h"
#include "base.h"
#include <vector>

namespace nbmap {

#define DUMMY_LAYER_ID       0xFFFFFFFF

class UnifiedLayerManager;

/*! Wrapper of UnifiedLayerManager.

    Different kinds of callbacks are passed to other threads, and may be invoked after
    UnifiedLayerManager destroyed. The UnifiedLayerManager holds a shared pointer of this
    wrapper, and passes this wrapper to each callback. And when UnifiedLayerManager is going
    to be destroyed by MapView instance, the pointer wrapped by this wrapper can be set to
    NULL so that all callbacks generated by UnifiedLayerManager is acknowledged that the
    UnifiedLayerManager is not valid any more.

 */
class LayerManagerWrapperForCallback : public Base
{
public:
    LayerManagerWrapperForCallback(UnifiedLayerManager* manager);
    virtual ~LayerManagerWrapperForCallback();
    UnifiedLayerManager* m_pManager;
};
typedef shared_ptr<LayerManagerWrapperForCallback> LayerManagerWrapperForCallbackPtr;

// Callbacks used by UnifiedLayerManager.
class TileRequestCallback : public AsyncCallbackWithRequest<TileKeyPtr, TilePtr>
{

public:
    TileRequestCallback(LayerManagerWrapperForCallbackPtr layerManager,
                        shared_ptr<AsyncCallbackWithRequest<TileKeyPtr,TilePtr> > callback);
    TileRequestCallback(LayerManagerWrapperForCallbackPtr layerManager,
                        shared_ptr<AsyncCallback<TilePtr> > callback);
    virtual ~TileRequestCallback();
    virtual void Success(TileKeyPtr request, TilePtr response);
    virtual void Error(TileKeyPtr request, NB_Error error);
private:
    LayerManagerWrapperForCallbackPtr m_pLayerManager;
    shared_ptr<AsyncCallbackWithRequest<TileKeyPtr,TilePtr> > m_pCallbackWithRequest;
    shared_ptr<AsyncCallback<TilePtr> > m_pCallbackWithoutRequest;
};

typedef shared_ptr<TileRequestCallback> TileRequestCallbackPtr;

/*! Callback used by UnifiedUnifiedLayerManager internally to retry metadata when 404 occurred.

  No matter GetLayers() succeeded or not, this callback will tell UnifiedUnifiedLayerManager to
  tell its listeners to refresh layer pointers they stored.
*/
class RetryGetLayerCallback : public AsyncCallback<const vector<LayerPtr>& >,
                              public Base
{
public:
    RetryGetLayerCallback(LayerManagerWrapperForCallbackPtr manager);
    virtual ~RetryGetLayerCallback();
    virtual void Success(const vector<LayerPtr>& layers);
    virtual void Error(NB_Error error);
private:
    LayerManagerWrapperForCallbackPtr m_layerManager;
};

typedef shared_ptr<RetryGetLayerCallback> RetryGetLayerCallbackPtr;


/*! Callbacks for layers, refer to AsyncCallback for description. */
class GenericLayerCallback : public AsyncCallback<const vector<LayerPtr>& >,
                             public Base
{
public:
    GenericLayerCallback(LayerManagerWrapperForCallbackPtr manager,
                         NB_Context* context,
                         shared_ptr<AsyncCallback<const vector<LayerPtr>& > > callback);
    virtual ~GenericLayerCallback();
    virtual void Success(const vector<LayerPtr>& layers);
    virtual void Error(NB_Error error);
private:
    void WriteQaLogPerformance(bool succeeded = true);
    LayerManagerWrapperForCallbackPtr m_pUnifiedLayerManager;
    shared_ptr<AsyncCallback<const vector<LayerPtr>& > > m_callback;
    uint32 m_startTimeStamp;       /*!< Time stamp of when this request started. */
    NB_Context* m_pContext;        /*!< NB_Context instance */
};

typedef shared_ptr<GenericLayerCallback>   GenericLayerCallbackPtr;

}
#endif /* _GENERICTILECALLBACK_H_ */
/*! @} */
