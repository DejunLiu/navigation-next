/*
Copyright (c) 2018, TeleCommunication Systems, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the TeleCommunication Systems, Inc., nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
DISCLAIMED. IN NO EVENT SHALL TELECOMMUNICATION SYSTEMS, INC.BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * (C) Copyright 2012 by TeleCommunication Systems, Inc.
 *
 * The information contained herein is confidential, proprietary
 * to TeleCommunication Systems, Inc., and considered a trade secret
 * as defined in section 499C of the penal code of the State of
 * California. Use of this information by anyone other than
 * authorized employees of TeleCommunication Systems is granted only
 * under a written non-disclosure agreement, expressly prescribing
 * the scope and manner of such use.
 *
 */

/*!--------------------------------------------------------------------------

    @file       Tuple.h

    A tuple is a fixed size collection of elements. It contains other
    objects as elements. These element objects may be of different
    types. The template parameter must be specified as a type list.
    The current version supports tuples with 1-6 elements. User could
    construct a Tuple object by function MakeTuple and get value of a
    Tuple object by function GetValue. For example:

    Tuple<TYPELIST_3(shared_ptr<string>, string*, int)> tupleObject =
    MakeTuple(stringSharedPoiner, &stringObject, integer);
    shared_ptr<string> value0 = GetValue<0>(tupleObject);
    string* value1 = GetValue<1>(tupleObject);
    int value2 = GetValue<2>(tupleObject);

    @todo: Support C++ reference (for example, std::string& and int&).
*/
/*
    (C) Copyright 2012 by TeleCommunications Systems, Inc.

    The information contained herein is confidential, proprietary
    to TeleCommunication Systems, Inc., and considered a trade secret as
    defined in section 499C of the penal code of the State of
    California. Use of this information by anyone other than
    authorized employees of TeleCommunication Systems is granted only
    under a written non-disclosure agreement, expressly
    prescribing the scope and manner of such use.

---------------------------------------------------------------------------*/

#ifndef TUPLE_H
#define TUPLE_H

/*!
    @addtogroup nbcommon
    @{
*/

#include "Typelist.h"

namespace nbcommon
{

// Types ........................................................................................

/*! Conversion for an integer to a type */
template <int Integer>
struct Int2Type
{
};


/*! Tag to mark left base class

    It is used to reveal when the input type list of ScatterHierarchyGenerator contains more
    then one element of the same type.
*/
template <class, class>
struct ScatterHierarchyLeftBaseTag;


/*! Generator for a scattered hierarchy starting from a typelist and a template invocation

    For example ScatterHierarchyGenerator<Typelist, Unit>. The generated class inherits all
    classes generated by instantiating the template 'Unit' with the types contained in Typelist.
*/
template <class Typelist, template <class> class Unit>
class ScatterHierarchyGenerator;

template <class T1, class T2, template <class> class Unit>
class ScatterHierarchyGenerator<Typelist<T1, T2>, Unit> :
    public ScatterHierarchyGenerator<ScatterHierarchyLeftBaseTag<T1, T2>, Unit>,
    public ScatterHierarchyGenerator<T2, Unit>
{
};

template <class T1, class T2, template <class> class Unit>
class ScatterHierarchyGenerator<ScatterHierarchyLeftBaseTag<T1, T2>, Unit> :
    public ScatterHierarchyGenerator<T1, Unit>
{
};

template <class AtomicType, template <class> class Unit>
class ScatterHierarchyGenerator :
    public Unit<AtomicType>
{
};

template <template <class> class Unit>
class ScatterHierarchyGenerator<NullType, Unit>
{
};


/*! Functions for accessing a field in an object of a type generated with
    ScatterHierarchyGenerator invocation
*/
template <class Typelist, template <class> class Unit>
Unit<typename Typelist::Head>&
FieldHelper(ScatterHierarchyGenerator<Typelist, Unit>& object,
            Int2Type<0> /*index*/)
{
    // Convert the object to a tag. Because it is a left base class.
    ScatterHierarchyGenerator<ScatterHierarchyLeftBaseTag<typename Typelist::Head, typename Typelist::Tail>, Unit>& tagBase = object;

    // Convert the tag to a generator contained only one type in type list.
    ScatterHierarchyGenerator<typename Typelist::Head, Unit>& leftBase = tagBase;

    // Convert to a field and return the result.
    Unit<typename Typelist::Head>& field = leftBase;
    return field;
}

template <int Index, class Typelist, template <class> class Unit>
Unit<typename TypeAt<Typelist, Index>::Result>&
FieldHelper(ScatterHierarchyGenerator<Typelist, Unit>& object,
            Int2Type<Index> /*index*/)
{
    // Convert the object to a generator. Because it is a right base class.
    ScatterHierarchyGenerator<typename Typelist::Tail, Unit>& rightBase = object;

    // Recursive call this function until index equals 0.
    return FieldHelper(rightBase, Int2Type<Index - 1>());
}

template <int Index, class Typelist, template <class> class Unit>
Unit<typename TypeAt<Typelist, Index>::Result>&
Field(ScatterHierarchyGenerator<Typelist, Unit>& object)
{
    // Call function FieldHelper to get field.
    return FieldHelper(object, Int2Type<Index>());
}


/*! Building block of tuples */
template <class T>
struct TupleUnit
{
    T value;
};


/*! Class Tuple to hold a number of values and provides field access to them via the
    Field function
*/
template <class Typelist>
struct Tuple : public ScatterHierarchyGenerator<Typelist, TupleUnit>
{
};


/*! Helper functions to construct Tuple objects */
template <class T0>
Tuple<TYPELIST_1(T0)>
MakeTuple(T0 value0)
{
    Tuple<TYPELIST_1(T0)> tupleObject;

    // Convert object to a reference of base class. Because low version of compiler cannot compile successfully.
    ScatterHierarchyGenerator<TYPELIST_1(T0), TupleUnit>& baseRef = tupleObject;

    Field<0>(baseRef).value = value0;

    return tupleObject;
}

template <class T0, class T1>
Tuple<TYPELIST_2(T0, T1)>
MakeTuple(T0 value0, T1 value1)
{
    Tuple<TYPELIST_2(T0, T1)> tupleObject;

    // Convert object to a reference of base class. Because low version of compiler cannot compile successfully.
    ScatterHierarchyGenerator<TYPELIST_2(T0, T1), TupleUnit>& baseRef = tupleObject;

    Field<0>(baseRef).value = value0;
    Field<1>(baseRef).value = value1;

    return tupleObject;
}

template <class T0, class T1, class T2>
Tuple<TYPELIST_3(T0, T1, T2)>
MakeTuple(T0 value0, T1 value1, T2 value2)
{
    Tuple<TYPELIST_3(T0, T1, T2)> tupleObject;

    // Convert object to a reference of base class. Because low version of compiler cannot compile successfully.
    ScatterHierarchyGenerator<TYPELIST_3(T0, T1, T2), TupleUnit>& baseRef = tupleObject;

    Field<0>(baseRef).value = value0;
    Field<1>(baseRef).value = value1;
    Field<2>(baseRef).value = value2;

    return tupleObject;
}

template <class T0, class T1, class T2, class T3>
Tuple<TYPELIST_4(T0, T1, T2, T3)>
MakeTuple(T0 value0, T1 value1, T2 value2, T3 value3)
{
    Tuple<TYPELIST_4(T0, T1, T2, T3)> tupleObject;

    // Convert object to a reference of base class. Because low version of compiler cannot compile successfully.
    ScatterHierarchyGenerator<TYPELIST_4(T0, T1, T2, T3), TupleUnit>& baseRef = tupleObject;

    Field<0>(baseRef).value = value0;
    Field<1>(baseRef).value = value1;
    Field<2>(baseRef).value = value2;
    Field<3>(baseRef).value = value3;

    return tupleObject;
}

template <class T0, class T1, class T2, class T3, class T4>
Tuple<TYPELIST_5(T0, T1, T2, T3, T4)>
MakeTuple(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4)
{
    Tuple<TYPELIST_5(T0, T1, T2, T3, T4)> tupleObject;

    // Convert object to a reference of base class. Because low version of compiler cannot compile successfully.
    ScatterHierarchyGenerator<TYPELIST_5(T0, T1, T2, T3, T4), TupleUnit>& baseRef = tupleObject;

    Field<0>(baseRef).value = value0;
    Field<1>(baseRef).value = value1;
    Field<2>(baseRef).value = value2;
    Field<3>(baseRef).value = value3;
    Field<4>(baseRef).value = value4;

    return tupleObject;
}

template <class T0, class T1, class T2, class T3, class T4, class T5>
Tuple<TYPELIST_6(T0, T1, T2, T3, T4, T5)>
MakeTuple(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5)
{
    Tuple<TYPELIST_6(T0, T1, T2, T3, T4, T5)> tupleObject;

    // Convert object to a reference of base class. Because low version of compiler cannot compile successfully.
    ScatterHierarchyGenerator<TYPELIST_6(T0, T1, T2, T3, T4, T5), TupleUnit>& baseRef = tupleObject;

    Field<0>(baseRef).value = value0;
    Field<1>(baseRef).value = value1;
    Field<2>(baseRef).value = value2;
    Field<3>(baseRef).value = value3;
    Field<4>(baseRef).value = value4;
    Field<5>(baseRef).value = value5;

    return tupleObject;
}


/*! Helper function to get value from a Tuple object by index */

template <int Index, class Typelist>
typename TypeAt<Typelist, Index>::Result&
GetValue(Tuple<Typelist>& tupleObject)
{
    // Convert object to a reference of base class. Because low version of compiler cannot compile successfully.
    ScatterHierarchyGenerator<Typelist, TupleUnit>& baseRef = tupleObject;

    // Call function Field to get value.
    return Field<Index>(baseRef).value;
}

};  // namespace nbcommon

/*! @} */

#endif  // CACHINGINDEX_H
