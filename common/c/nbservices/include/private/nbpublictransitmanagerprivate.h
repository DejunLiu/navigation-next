/*
Copyright (c) 2018, TeleCommunication Systems, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the TeleCommunication Systems, Inc., nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
DISCLAIMED. IN NO EVENT SHALL TELECOMMUNICATION SYSTEMS, INC.BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*!--------------------------------------------------------------------------

    @file     nbpublictransitmanagerprivate.h
*/
/*
    (C) Copyright 2011 by TeleCommunications Systems, Inc.

    The information contained herein is confidential, proprietary
    to TeleCommunication Systems, Inc., and considered a trade secret as
    defined in section 499C of the penal code of the State of
    California. Use of this information by anyone other than
    authorized employees of TeleCommunication Systems, Inc. is granted only
    under a written non-disclosure agreement, expressly
    prescribing the scope and manner of such use.

---------------------------------------------------------------------------*/

#ifndef NBPUBLICTRANSITMANAGERPRIVATE_H
#define NBPUBLICTRANSITMANAGERPRIVATE_H

#include "nbpublictransitmanager.h"
#include "nbsearchhandler.h"
#include "vec.h"

/*!
    @addtogroup nbpublictransitmanager
    @{
*/

#define LANGUAGE_CODE_LENGTH       5

// Types ..................................................................................
//
typedef struct
{
    uint32                              id;                             /*!< Unique route agency id */
    char                                shortName[NB_PLACE_NAME_LEN+1]; /*!< Transit route short name */
    char                                longName[NB_PLACE_NAME_LEN+1];  /*!< Transit route long name */
    NB_Category                         type;                           /*!< Transit route type */
    nb_color                            color;                          /*!< Transit route color */
    nb_color                            textColor;                      /*!< Transit route text color */
    CSL_Vector*                         transitPlaces;                  /*!< List of Place Ids */
    nb_boolean                          isRouteComplete;                /*!<. verify if the route is complete*/
} PublicTransitRoute;

typedef struct
{
    uint32                              id;                             /*!< Unique stop agency id */
    uint32                              sequence;                       /*!< Stop sequence*/
    uint32                              agencyId;
    char                                agencyName[NB_PLACE_NAME_LEN+1];/*!< Name of the transit agency */
} PublicTransitAgencyStop;

typedef struct
{
    uint32                              agencyStopId;                  /*!< agency stop Id: PublicTransitAgencyStop */
    uint32                              routeId;                       /*!< route Id: PublicTransitRoute */
    CSL_Vector*                         hoursOfOperation;              /*!< list of hours of operation for route per stop */
} PublicTransitStop;


typedef struct
{
    uint32                              id;                             /*!< Unique Stop id generated by PTM*/
    CSL_Vector*                         stops;                          /*!< Array of PublicTransitStop structures */
    nb_boolean                          isTransitPlaceComplete;         /*!< To verify if the transit place is complete*/
    NB_Place                            place;                          /*!< NB Place*/
    uint32                              stopType;                       /*!< Combined routeType's for this stop/place */
} PublicTransitPlace;

typedef struct
{
    NB_BoundingBox                              boundingBox;
    const char*                                 language;
    uint32*                                     startTransitPlaceList;          /*!< List of TransitPlace Ids */
    int                                         startListCount;                 /*!< The count of the above list */
    uint32*                                     endTransitPlaceList;            /*!< List of TranistRoute Ids */
    int                                         endListCount;                   /*!< The count of the above list */
    NB_PublicTransitPlanTripCallbackFunction    callBack;
    void*                                       cbData;
    NB_SearchHandler*                           pStartSearchHandler;            /*!< Handler of searching PT POI near start place */
    NB_SearchHandler*                           pEndSearchHandler;              /*!< Handler of searching PT POI near end place */
    nb_boolean                                  startSearchDone;
    nb_boolean                                  endSearchDone;

} PlanTripData;

typedef NB_Error (*NB_PublicTransitStopRequestCallbackFunction)(NB_PublicTransitManager* pThis, PublicTransitPlace*transitPlace, NB_RequestStatus status, NB_Error err);

/*! The public transit manager object. Gets created in NB_PublicTransitManagerCreate.

    @See NB_PublicTransitManagerCreate
*/
struct NB_PublicTransitManager
{
    NB_Context*                         context;
    char                                language[LANGUAGE_CODE_LENGTH+1];  // "-en-us", "-es-mx"
    CSL_Vector*                         routeList;                      /*!< List of routes, built from transit places, each instance will store information about did we perform 2 level PT request or not */
    CSL_Vector*                         stopsList;                      /*!< Plain list of stops*/
    CSL_Vector*                         transitPlaceList;               /*!< List of transit places. */
    uint32                              nextUniqueID;                   /*!< Incremental ID supplied to each TransitPlace */
    NB_BoundingBox                      queryBoundingBox;               /*!< Limit for 2nd-level queries (set externally) */
    //TODO: pending request object
    NB_PublicTransitRequestCallbackFunction   requestCallback; /*!< callback function pointer for place requiest */
    void*                                     requestCallbackData; /*!< callback data pointer for place requiest */
    NB_PublicTransitGetStopInfoCallback       getStopInfoCallback; /*!< callback function pointer for get stop info */
    NB_PublicTransitStopRequestCallbackFunction stopRequestCallback; /*!< callback function pointer it's used to post process stop request */
    void*                                     getStopInfoCallbackData; /*!< callback data pointer for get stop info */
    uint32                                    requestedPlaceId;   /*!< place id, which were requested */
    CSL_Vector*                               placeIdList; /*!< List of place IDs, which are returned as results for NB_PublicTransitManagerRequestStops */
    NB_SearchHandler*                         searchHandler;   /*!< stops search handler */
    PlanTripData                              planTripData;
};

// Functions ..............................................................................

PublicTransitPlace* GetPlaceByID(NB_PublicTransitManager*pThis, uint32 id);
int AddPlaceToCache(NB_PublicTransitManager*pThis, PublicTransitPlace* place);
PublicTransitRoute* GetRouteByID(NB_PublicTransitManager*pThis, uint32 id);
PublicTransitRoute* AddRouteToCache(NB_PublicTransitManager* pThis, NB_PublicTransitStopInfo*agencyRoute);
PublicTransitAgencyStop* GetStopByID(NB_PublicTransitManager*pThis, uint32 id);
PublicTransitAgencyStop* AddAgencyStopToCache(NB_PublicTransitManager*pThis, NB_PublicTransitStopInfo*agencyStop, uint32 placeID);
nb_boolean PlacesMatch(PublicTransitPlace* place1, PublicTransitPlace* place2);
void CopyHoursStructure(NB_PublicTransitHours* dest, NB_PublicTransitHours* src);
NB_Error CopyNBHours(NB_PublicTransitStopInfo* agencyStop, PublicTransitStop* ptmTransitStop);
uint32 GetNewPlaceId(NB_PublicTransitManager*pThis);
uint32 AppendRouteList(NB_PublicTransitManager* pThis, NB_PublicTransitStopInfo* agencyStop, uint32 placeID);
/*! @} */

#endif  // NBPUBLICTRANSITMANAGERPRIVATE_H
