(nav-instruct (command-set-version [uint]101  media-type __MEDIATYPE__ media-sub-type __MEDIASUBTYPE__ player __PLAYER__)
;
; Define the basic sound for each turn.
; This allows many subsequent rules to be combined since they 
; only differ in the basic turn command
;
  (turn-sounds ()
; TR.R - Right Turn
    (define-turn-sound (turn TR.R pos prepare)
      (sound (id prep-right)))
    (define-turn-sound (turn TR.R pos turn|past-turn)
      (sound (id right)))
; TR.L - Left Turn
    (define-turn-sound (turn TR.L pos prepare)
      (sound (id prep-left)))
    (define-turn-sound (turn TR.L pos turn|past-turn)
      (sound (id left)))
; UT. - U Turn
    (define-turn-sound (turn UT. pos prepare)
      (sound (id prep-u-turn)))
    (define-turn-sound (turn UT. pos turn|past-turn)
      (sound (id u-turn)))
; EN.R - Enter Highway on the Right
    (define-turn-sound (turn EN.R pos prepare)
      (sound (id prep-enter-hwy-right)))
    (define-turn-sound (turn EN.R pos turn|past-turn)
      (sound (id enter-hwy-right)))
; EN.L - Enter Highway on the Left
    (define-turn-sound (turn EN.L pos prepare)
      (sound (id prep-enter-hwy-left)))
    (define-turn-sound (turn EN.L pos turn|past-turn)
      (sound (id enter-hwy-left)))
; EN.  - Enter Highway straight ahead
    (define-turn-sound (turn EN. pos prepare)
      (sound (id prep-enter-hwy-straight)))
    (define-turn-sound (turn EN. pos turn|past-turn)
      (sound (id enter-hwy-straight)))
; EX. - Exit Highway
    (define-turn-sound (turn EX. pos prepare)
      (sound (id prep-exit-hwy)))
    (define-turn-sound (turn EX. pos turn|past-turn)
      (sound (id exit-hwy)))
; EX.R - Exit Highway on the Right
    (define-turn-sound (turn EX.R pos prepare)
      (sound (id prep-exit-hwy-right)))
    (define-turn-sound (turn EX.R pos turn|past-turn)
      (sound (id exit-hwy-right)))
; EX.L - Exit Highway on the Left
    (define-turn-sound (turn EX.L pos prepare)      
      (sound (id prep-exit-hwy-left)))
    (define-turn-sound (turn EX.L pos turn|past-turn)
      (sound (id exit-hwy-left)))
; MR.R - Merge into traffic on the right
    (define-turn-sound (turn MR.R pos prepare)
      (sound (id prep-merge-right)))
    (define-turn-sound (turn MR.R pos turn|past-turn)
      (sound (id merge-right)))
; MR.L - Exit Highway on the Left
    (define-turn-sound (turn MR.L pos prepare)
      (sound (id prep-merge-left)))
    (define-turn-sound (turn MR.L pos turn|past-turn)
      (sound (id merge-left)))
; KP.R - Keep to the right (Split)
    (define-turn-sound (turn KP.R pos prepare)
      (sound (id prep-keep-right)))
    (define-turn-sound (turn KP.R pos turn|past-turn)
      (sound (id keep-right)))
; KP.L - Keep to the left (Split)
    (define-turn-sound (turn KP.L pos prepare)
      (sound (id prep-keep-left)))
    (define-turn-sound (turn KP.L pos turn|past-turn)
      (sound (id keep-left)))
; KP. - Keep to the center (Split)
    (define-turn-sound (turn KP. pos prepare)
      (sound (id continue)))
    (define-turn-sound (turn KP. pos turn|past-turn)
      (sound (id continue)))
; NC. - Name Change (Continue)
    (define-turn-sound (turn NC. pos *)
      (sound (id continue)))
; DT. - Destination
    (define-turn-sound (turn DT. pos prepare)
      (sound (id dest-approaching)))
    (define-turn-sound (turn DT. pos turn|past-turn)
      (sound (id arrived-dest)))
; DT.R - Destination on the right
    (define-turn-sound (turn DT.R pos prepare)
      (sound (id dest-approaching-right)))
    (define-turn-sound (turn DT.R pos turn|past-turn)
      (sound (id dest-right)))
; DT.L - Destination on the left
    (define-turn-sound (turn DT.L pos prepare)
      (sound (id dest-approaching-left)))
    (define-turn-sound (turn DT.L pos turn|past-turn) 
      (sound (id dest-left)))
; DT.U - Destination Unknown (Continue)
    (define-turn-sound (turn DT.U pos *)
      (sound (id continue))) 
; RE. - Enter Traffic Circle - TODO implement new sounds
    (define-turn-sound (turn RE. pos prepare)
      (sound (id prep-enter-tc)))
    (define-turn-sound (turn RE. pos turn|past-turn)
      (sound (id enter-tc)))
; RX.1 - Exit Traffic Cirle 1st Exit
    (define-turn-sound (turn RX.1 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id first))
      (sound (id road)))
    (define-turn-sound (turn RX.1 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id first))
      (sound (id road)))
; RX.2 - Exit Traffic Cirle 2nd Exit
    (define-turn-sound (turn RX.2 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id second))
      (sound (id road)))
    (define-turn-sound (turn RX.2 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id second))
      (sound (id road)))
; RX.3 - Exit Traffic Cirle 3rd Exit
    (define-turn-sound (turn RX.3 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id third))
      (sound (id road)))
    (define-turn-sound (turn RX.3 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id third))
      (sound (id road)))
; RX.4 - Exit Traffic Cirle 4th Exit
    (define-turn-sound (turn RX.4 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id fourth))
      (sound (id road)))    
    (define-turn-sound (turn RX.4 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id fourth))
      (sound (id road)))
; RX.5 - Exit Traffic Cirle 5th Exit
    (define-turn-sound (turn RX.5 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id fifth))
      (sound (id road)))
    (define-turn-sound (turn RX.5 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id fifth))
      (sound (id road)))
; RX.6 - Exit Traffic Cirle 6th Exit
    (define-turn-sound (turn RX.6 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id sixth))
      (sound (id road)))
    (define-turn-sound (turn RX.6 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id sixth))
      (sound (id road)))
; RX.7 - Exit Traffic Cirle 7th Exit
    (define-turn-sound (turn RX.7 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id seventh))
      (sound (id road)))
    (define-turn-sound (turn RX.7 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id seventh))
      (sound (id road)))
; RX.8 - Exit Traffic Cirle 8th Exit
    (define-turn-sound (turn RX.8 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id eighth))
      (sound (id road)))
    (define-turn-sound (turn RX.8 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id eighth))
      (sound (id road)))
; RX.9 - Exit Traffic Cirle 9th Exit
    (define-turn-sound (turn RX.9 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id ninth))
      (sound (id road)))
    (define-turn-sound (turn RX.9 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id ninth))
      (sound (id road)))
; RX.10 - Exit Traffic Cirle 10th Exit
    (define-turn-sound (turn RX.10 pos prepare)
      (sound (id prep-exit-tc))
      (sound (id tenth))
      (sound (id road)))
    (define-turn-sound (turn RX.10 pos turn|past-turn)
      (sound (id exit-tc))
      (sound (id tenth))
      (sound (id road)))
; RT. - Drive straight through traffic circle (rotary/round-about)
    (define-turn-sound (turn RT. pos prepare)
      (sound (id prep-straight-thru-tc)))
    (define-turn-sound (turn RT. pos turn|past-turn)
      (sound (id straight-thru-tc)))
; OR. - Origin (Startup Case)
    (define-turn-sound (turn OR. pos prepare)
      (sound (id go-to)))
    (define-turn-sound (turn OR. pos turn|past-turn)
      (sound (id go-to)))
; TC. - Traffic Congestion
    (define-turn-sound (turn TC. pos *)
      (sound (id congestion-ahead)))
; TC.S - Severe Traffic Congestion
    (define-turn-sound (turn TC.S pos *)
      (sound (id severe))
      (sound (id congestion-ahead)))
; TI. - Traffic Incident
    (define-turn-sound (turn TI. pos *)
      (sound (id incident-ahead)))
; TI.S - Severe Traffic Incident
    (define-turn-sound (turn TI.S pos *)
      (sound (id severe))
      (sound (id incident-ahead)))
; FE. - Catch a Ferry
    (define-turn-sound (turn FE. pos prepare)
      (sound (id prep-enter-ferry)))
    (define-turn-sound (turn FE. pos turn|past-turn)
      (sound (id enter-ferry)))
; FX. - Exit Ferry
    (define-turn-sound (turn FX. pos prepare)
      (sound (id prep-exit-ferry)))
    (define-turn-sound (turn FX. pos turn|past-turn)
      (sound (id exit-ferry)))
; NR.R - Enter Private Roadway on the Right
    (define-turn-sound (turn NR.R pos prepare)
      (sound (id prep-enter-pvt-roadway-right)))
    (define-turn-sound (turn NR.R pos turn|past-turn)
      (sound (id enter-pvt-roadway-right)))
; NR.L - Enter Private Roadway on the Left
    (define-turn-sound (turn NR.L pos prepare)
      (sound (id prep-enter-pvt-roadway-left)))
    (define-turn-sound (turn NR.L pos turn|past-turn)
      (sound (id enter-pvt-roadway-left)))
; NR.  - Enter Private Roadway Straight Ahead
    (define-turn-sound (turn NR. pos prepare)
      (sound (id prep-enter-pvt-roadway-straight)))
    (define-turn-sound (turn NR. pos turn|past-turn)
      (sound (id enter-pvt-roadway-straight)))
; BE.R - Cross Bridge  on the Right
    (define-turn-sound (turn BE.R pos prepare)
      (sound (id prep-cross-bridge-right)))
    (define-turn-sound (turn BE.R pos turn|past-turn)
      (sound (id cross-bridge-right)))
; BE.L - Cross Bridge on the Left
    (define-turn-sound (turn BE.L pos prepare)
      (sound (id prep-cross-bridge-left)))
    (define-turn-sound (turn BE.L pos turn|past-turn)
      (sound (id cross-bridge-left)))
; BE.  - Cross Bridge Straight Ahead
    (define-turn-sound (turn BE. pos prepare)
      (sound (id prep-cross-bridge-straight)))
    (define-turn-sound (turn BE. pos turn|past-turn)
      (sound (id cross-bridge-straight)))
; TE.R - Enter Tunnel  on the Right
    (define-turn-sound (turn TE.R pos prepare)
      (sound (id prep-enter-tunnel-right)))
    (define-turn-sound (turn TE.R pos turn|past-turn)
      (sound (id enter-tunnel-right)))
; TE.L - Enter Tunnel on the Left
    (define-turn-sound (turn TE.L pos prepare)
      (sound (id prep-enter-tunnel-left)))
    (define-turn-sound (turn TE.L pos turn|past-turn)
      (sound (id enter-tunnel-left)))
; TE.  - Enter Tunnel Straight Ahead
    (define-turn-sound (turn TE. pos prepare)
      (sound (id prep-enter-tunnel-straight)))
    (define-turn-sound (turn TE. pos turn|past-turn)
      (sound (id enter-tunnel-straight)))
; ES.R - Take the Stairs on the Right
    (define-turn-sound (turn ES.R pos prepare)
      (sound (id prep-stairs-right)))
    (define-turn-sound (turn ES.R pos turn|past-turn)
      (sound (id stairs-right)))
; ES.L - Take the Stairs on the Left
    (define-turn-sound (turn ES.L pos prepare)
      (sound (id prep-stairs-left)))
    (define-turn-sound (turn ES.L pos turn|past-turn)
      (sound (id stairs-left)))
; ES.  - Take the Stairs Straight Ahead
    (define-turn-sound (turn ES. pos prepare)
      (sound (id prep-stairs-straight)))
    (define-turn-sound (turn ES. pos turn|past-turn)
      (sound (id stairs-straight)))
; EE.R - Take the Escalator on the Right
    (define-turn-sound (turn EE.R pos prepare)
      (sound (id prep-escalator-right)))
    (define-turn-sound (turn EE.R pos turn|past-turn)
      (sound (id escalator-right)))
; EE.L - Take the Escalator on the Left
    (define-turn-sound (turn EE.L pos prepare)
      (sound (id prep-escalator-left)))
    (define-turn-sound (turn EE.L pos turn|past-turn)
      (sound (id escalator-left)))
; EE.  - Take the Escalator Straight Ahead
    (define-turn-sound (turn EE. pos prepare)
      (sound (id prep-escalator-straight)))
    (define-turn-sound (turn EE. pos turn|past-turn)
      (sound (id escalator-straight)))
; ER.R - Take the Ramp on the Right
    (define-turn-sound (turn ER.R pos prepare)
      (sound (id prep-ramp-right)))
    (define-turn-sound (turn ER.R pos turn|past-turn)
      (sound (id ramp-right)))
; ER.L - Take the Ramp on the Left
    (define-turn-sound (turn ER.L pos prepare)
      (sound (id prep-ramp-left)))
    (define-turn-sound (turn ER.L pos turn|past-turn)
      (sound (id ramp-left)))
; ER.  - Take the Ramp Straight Ahead
    (define-turn-sound (turn ER. pos prepare)
      (sound (id prep-ramp-straight)))
    (define-turn-sound (turn ER. pos turn|past-turn)
      (sound (id ramp-straight)))
; PE.  - Continue on Foot
    (define-turn-sound (turn PE. pos prepare)
      (sound (id continue-on-foot)))
    (define-turn-sound (turn PE. pos turn|past-turn)
      (sound (id continue-on-foot)))
; SC. - Speed camera ahead
    (define-turn-sound (turn SC. pos turn)
      (sound (id camera-alert)))
; SC.S - Camera speeding alert
    (define-turn-sound (turn SC.S pos turn)
      (sound (id turn-tone)))
; EC.R - Enter Country on the Right
    (define-turn-sound (turn EC.R pos prepare)
      (sound (id enter-country-right)))
    (define-turn-sound (turn EC.R pos turn|past-turn)
      (sound (id enter-country-right)))
; EC.L - Enter Country on the Left
    (define-turn-sound (turn EC.L pos prepare)
      (sound (id enter-country-left)))
    (define-turn-sound (turn EC.L pos turn|past-turn)
      (sound (id enter-country-left)))
; EC.  - Enter Country Straight Ahead
    (define-turn-sound (turn EC. pos prepare)
      (sound (id enter-country-straight)))
    (define-turn-sound (turn EC. pos turn|past-turn)
       (sound (id enter-country-straight))))
     
;
; Define the transition sounds associated with each type of turn
;
  (transition-sounds ()
    (define-transition-sound (turn TR.R|TR.L|MR.R|MR.L|KP.R|KP.L|KP.|NR.R|NR.L|NR.|BE.R|BE.L|BE.|TE.R|TE.L|TE.|ES.R|ES.L|ES.|EE.R|EE.L|EE.|ER.R|ER.L|ER.|FE.|FX.|RT.|RX.|RX.1|RX.2|RX.3|RX.4|RX.5|RX.6|RX.7|RX.8|RX.9|RX.10|EC.|EC.R|EC.L pos *)
      (sound (id on)))
    (define-transition-sound (turn EN.R|EN.L|EN.|PE. pos *)
      (sound (id for)))
    (define-transition-sound (turn EX.|EX.R|EX.L pos *)
      (sound (id at)))
    (define-transition-sound (turn NC. pos *)
      (sound (id on)))
 ; no transition sound for ferry entry
    (define-transition-sound (turn FE. pos *)))
;
; Tone Mode Configuration
;
  (section (name tone)
; All prepare cases
    (instruction (turn * stacknext * pos prepare)
      (sound (id prepare-tone)))
; All turn cases
    (instruction (turn * stacknext * pos turn|past-turn)
      (sound (id turn-tone)))
; Recalc Case
    (instruction (pos recalc)
      (sound (id recalc-tone)))
; Soft Recalc Case
    (instruction (pos soft-recalc)
      (sound (id soft-recalc-tone)))
; Recalc Confirm Case
    (instruction (pos recalc-confirm)
      (sound (id recalc-confirm-tone)))
; Traffic Calc/Recalc Case
    (instruction (pos recalc-traffic)
      (sound (id recalc-tone)))
; Traffic Alert Case
    (instruction (pos traffic-alert)
      (sound (id turn-tone)))
; Route Calc Case
    (instruction (pos calc)
      (sound (id recalc-tone))))      
;
; Short Voice Mode Configuration
; [currenlty used for short-annc as well since 
;  that section does not currently exist]
;
  (section (name short)
;
; Continue Position Configuration
;
    (instruction (turn * stacknext * pos continue)
      (sound (id continue-on-road)))
;
; Prepare Position Configuration
;
; Special Case - Name Change      
    (instruction (turn NC. stacknext * pos prepare)
      (sound (id continue-on-road)))
; Special Case - stack to name change
    (instruction (turn * stacknext NC. pos prepare)
      (turn-sound ())
      (sound (id then))
      (sound (id continue-on-road)))
; Special Case - U-Turn
    (instruction (turn UT. stacknext * pos prepare)
      (sound (id make-legal-uturn)))
; Special Case - Enter Traffic circle
    (instruction (turn RX. stacknext * pos prepare)
      (turn-sound ())
      (if (turn RX. stacknext * next *)
        (sound (id then))
        (next ()
          (turn-sound (pos turn)))))
    (instruction (turn RE. stacknext * pos prepare)
      (turn-sound ())
      (if (turn RE. stacknext * next RX.1|RX.2|RX.3|RX.4|RX.5|RX.6|RX.7|RX.8|RX.9|RX.10)
        (sound (id then))
        (next ()
          (turn-sound (pos turn)))))
; General Case - play the turn sound, then, if applicable
;                play the stack sound
    (instruction (turn * stacknext * pos prepare)
      (turn-sound ()))

;
; Turn Position Configuration
;
; Special Case - Name Change      
    (instruction (turn NC. stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id continue-on-road)))
; Special Case - name change
    (instruction (turn NC. stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id continue-on-road)))
; Special Case - Stack to name change
    (instruction (turn * stacknext NC. pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ())
      (sound (id then))
      (sound (id continue-on-road)))
; Special Case - U-Turn
    (instruction (turn UT. stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id make-legal-uturn)))
; Special Case - Speed camera
    (instruction (turn SC. stacknext * pos turn)
      (turn-sound ())
      (sound (id in))
      (speedcameraremaindist ()))        
    (instruction (turn SC.S pos turn)
      (turn-sound ()))
; Stack to Merge Case
    (instruction (turn * stacknext MR.L|MR.R pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ()))
; General Case - play the turn sound, then, if applicable
;                play the stack sound (no stack for FX.)
    (instruction (turn * stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ())
      (if-not-lookahead ()
        (if (turn * stacknext * next !DT.)
          (if (turn * stacknext * next !DT.R)
            (if (turn * stacknext * next !DT.L)
              (if (turn * stacknext * next !FX.)
                (if-not-lookahead ()
                  (if-stack ()
                    (if (turn * stacknext !NC. next *)
                      (sound (id then))
                        (stack-sound (pos prepare)))))))))
        (if (turn * stacknext * next DT.|DT.R|DT.L)
          (sound (id towards))
          (sound (id your-dest)))))
;
; Recalc Configurations
;
    (instruction (pos recalc)
      (sound (id recalc)))
; Soft Recalc Case
    (instruction (pos soft-recalc)
      (sound (id soft-recalc-tone)))
; Recalc Confirm Case
    (instruction (pos recalc-confirm)
      (sound (id recalc-confirm-tone)))
; Traffic Calc/Recalc Case
    (instruction (pos recalc-traffic)
      (sound (id calc-traffic)))
; Route Calc Case
    (instruction (pos calc)
      (sound (id calc-route)))      
; Traffic Alert Case
    (instruction (pos traffic-alert)
      (sound (id traffic-update))
      (expect-traffic ())
      (if-traffic-delay-threshold ()
        (traffic-delay ())
        (sound (id delay))))
; Traffic Delay Case
    (instruction (pos traffic-delay)
      (expect-traffic ())
      (if-traffic-delay-threshold ()
        (traffic-delay ())
        (sound (id delay)))))

;
; Long Mode Voice Configiguration (w/ Street Names)
;
  (section (name long)
;
; Continue Position Configuration
;
    (instruction (turn * stacknext * pos continue)
      (sound (id continue-on))
      (opronun ())
      (sound (id for))
      (dist ())
      (if-next-named-dist-lt-max ()   
        (sound (id then))
        (turn-sound (pos turn))
        (if-unnamed ()
          (sound (id towards))
          (if-next-named () 
            (next-named ()            
              (dpronun-base ())))
          (if-not-next-named ()
            (sound (id your-dest))))
        (if-not-unnamed ()
          (if-toward-name ()
            (sound (id towards)))
          (if-not-toward-name ()
            (transition-sound (pos turn)))
          (dpronun ())        
          (if (turn * stacknext * next DT.|DT.R|DT.L)
            (sound (id towards))
            (sound (id your-dest))))))
; Destination Case
    (instruction (turn DT.|DT.R|DT.L stacknext * pos continue)
      (sound (id continue-on))
      (opronun ())
      (sound (id for))
      (dist ())
      (sound (id towards))
      (sound (id your-dest)))
;
; Prepare Position Configuration
;
; Name Change Case
    (instruction (turn NC. stacknext * pos prepare)
    ; nothing
      )
; Destination Case
    (instruction (turn DT.|DT.R|DT.L stacknext * pos prepare)
      (turn-sound ())
      (sound (id in))
      (dist ()))
; Special Case - U-Turn
    (instruction (turn UT. stacknext * pos prepare)
      (sound (id after))
      (dist ())
      (sound (id make-legal-uturn)))

; General Case
    (instruction (turn !FX. stacknext * pos prepare)
      (turn-sound ())
      (sound (id in))
      (dist ())
      ; no road info for FE in prepare
      (if (turn !FE. stacknext * next *)
        (if-unnamed ()
          (sound (id towards))
          (if-next-named () 
            (next-named ()
              (dpronun-base ())))
          (if-not-next-named ()
            (sound (id your-dest))))
        (if-not-unnamed ()
          (if-toward-name ()
            (sound (id towards)))
          (if-not-toward-name ()
            (transition-sound ()))
          (dpronun ()))))

;
; Turn Position Configuration
;
; Special Tunnel Case
    (instruction (turn TE.|TE.R|TE.L stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ())
      (if-stack() 
        (next-significant ()
  		  (sound (id then))
 		  (sound (id in))
		  (next-significant-dist ())
          (turn-sound (pos turn))
          (if-unnamed ()
            (sound (id towards))
            (if-next-named () 
              (next-named ()
                (dpronun-base ())))
            (if-not-next-named ()
              (sound (id your-dest))))
          (if-not-unnamed ()
            (if-toward-name ()
              (sound (id towards)))
            (if-not-toward-name ()
              (transition-sound (pos turn)))
            (dpronun ())
            (if (turn * stacknext * next DT.|DT.R|DT.L)
              (sound (id towards))
              (sound (id your-dest)))))))
; Destination Case
    (instruction (turn DT.|DT.R|DT.L stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ()))
; Name Change Case
    (instruction (turn NC. stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (if-toward-name ()
        (sound (id continue))
        (sound (id towards)))
      (if-not-toward-name ()
        (sound (id continue-on)))
      (dpronun ()))
; Special Case - U-Turn
    (instruction (turn UT. stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id make-legal-uturn)))
; Special Case - Merge
;    (instruction (turn MR.L|MR.R stacknext * pos turn|past-turn)
;      (if-lookahead ()
;        (sound (id step))
;        (step-number ()))
;      (turn-sound ())
;      (if-unnamed ()
;        (sound (id towards))
;        (if-next-named () 
;          (next-named ()
;            (dpronun-base ())))
;        (if-not-next-named ()
;          (sound (id your-dest))))
;      (if-not-unnamed ()
;        (transition-sound ())
;        (dpronun ()))
;      (next ()
;        (sound (id for))
;        (next-named-dist ())
;        (if-next-named-dist-lt-max ()
;          (sound (id towards))
;          (if-next-named ()
;            (next-named ()
;              (dpronun-base ())))
;          (if-not-next-named ()
;            (sound (id your-dest)))))
;      (if-stack ()
;        (if (turn * stacknext !NC. next *)
;          (sound (id then))
;          (stack-sound (pos prepare))))) 

; Stack to Merge Case
    (instruction (turn * stacknext MR.L|MR.R pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ())
      (if-unnamed ()
        (sound (id towards))
        (if-next-named () 
          (next-named ()
            (dpronun-base ())))
        (if-not-next-named ()
          (sound (id your-dest))))
      (if-not-unnamed ()
        (if-toward-name ()
          (sound (id towards)))
        (if-not-toward-name ()
          (transition-sound ()))
        (dpronun ())))
; Special Case - Speed cameras no pronoun - Turn SC.      
    (instruction (turn SC. stacknext * pos turn)
      (turn-sound ())
      (sound (id in))
      (speedcameraremaindist ()))        
; Special Case - Speeding alert no pronoun - Turn SC.S      
    (instruction (turn SC.S stacknext * pos turn)
      (turn-sound ()))
; General Case - no prepare for if stacknext is FX.
    (instruction (turn * stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ())
      (if-unnamed ()
        (sound (id towards))
        (if-next-named () 
          (next-named ()
            (dpronun-base ())))
        (if-not-next-named ()
          (sound (id your-dest))))
      (if-not-unnamed ()
        (if-toward-name ()
          (sound (id towards)))
        (if-not-toward-name ()
          (transition-sound ()))
        (dpronun ())
        (if (turn * stacknext * next !DT.)
          (if (turn * stacknext * next !DT.R)
            (if (turn * stacknext * next !DT.L)
              (if (turn * stacknext * next !FX.)
                (if-not-lookahead ()
                  (if-stack ()
                    (if (turn * stacknext !NC. next *)
                      (sound (id then))
                      (stack-sound (pos prepare)))))))))
        (if (turn * stacknext * next DT.|DT.R|DT.L)
          (sound (id towards))
          (sound (id your-dest)))))
;
; Recalc Configurations
;
    (instruction (pos recalc)
      (sound (id recalc)))
; Soft Recalc Case
    (instruction (pos soft-recalc)
      (sound (id soft-recalc-tone)))
; Recalc Confirm Case
    (instruction (pos recalc-confirm)
      (sound (id recalc-confirm-tone)))
; Traffic Calc/Recalc Case
    (instruction (pos recalc-traffic)
      (sound (id calc-traffic)))
; Route Calc Case
    (instruction (pos calc)
      (sound (id calc-route)))     
; Traffic Alert Case
    (instruction (pos traffic-alert)
      (sound (id traffic-update))
      (expect-traffic ())
      (if-traffic-delay-threshold ()
        (traffic-delay ())
        (sound (id delay))))
; Traffic Delay Case
    (instruction (pos traffic-delay)
      (expect-traffic ())
      (if-traffic-delay-threshold ()
        (traffic-delay ())
        (sound (id delay)))))      
;
; Long Mode Announce Voice Configiguration (w/ Street Names)
;
  (section (name long-annc)
;
; Continue Position Configuration
;
; General Case
    (instruction (turn * stacknext * pos continue)
      (sound (id continue-on))
      (opronun ())
      (sound (id for))
      (dist ())
      (if-next-named-dist-lt-max ()   
        (sound (id then))
        (turn-sound (pos turn))
        (if-unnamed ()
          (sound (id towards))
          (if-next-named () 
            (next-named ()            
              (dpronun-base ())))
          (if-not-next-named ()
            (sound (id your-dest))))
        (if-not-unnamed ()
          (if-toward-name ()
            (sound (id towards)))
          (if-not-toward-name ()
            (transition-sound (pos turn)))
          (dpronun ())        
          (if (turn * stacknext * next DT.|DT.R|DT.L)
            (sound (id towards))
            (sound (id your-dest))))))
; Destination Case
    (instruction (turn DT.|DT.R|DT.L stacknext * pos continue)
      (sound (id continue-on))
      (opronun ())
      (sound (id for))
      (dist ())
      (sound (id towards))
      (sound (id your-dest)))
;
; Prepare Position Configuration
;
; Special Case - U-Turn
    (instruction (turn UT. stacknext * pos prepare)
      (sound (id after))
      (dist ())
      (sound (id make-legal-uturn)))
; Continue Case
    (instruction (turn NC. stacknext * pos prepare)
      (sound (id continue-on))
      (opronun ())
      (sound (id for))
      (dist ())
      (sound (id then))
      (if-toward-name ()
        (sound (id continue))
        (sound (id towards)))
      (if-not-toward-name ()
        (sound (id continue-on)))
      (dpronun ())
      (if (turn * stacknext * next DT.|DT.R|DT.L)
        (sound (id towards))
        (sound (id your-dest))))
; Destination Approaching Case
    (instruction (turn DT.|DT.R|DT.L stacknext * pos prepare)
      (turn-sound ())
      (sound (id in))
      (dist ()))

; General Case
    (instruction (turn !FX. stacknext * pos prepare)
      (turn-sound ())
      (sound (id in))
      (dist ())
      ; no road info for FE in prepare
      (if (turn !FE. stacknext * next *)
        (if-unnamed ()
          (sound (id towards))
          (if-next-named () 
            (next-named ()
              (dpronun-base ())))
          (if-not-next-named ()
            (sound (id your-dest))))
        (if-not-unnamed ()
          (if-toward-name ()
            (sound (id towards)))
          (if-not-toward-name ()
            (transition-sound ()))
          (dpronun ())
          (if (turn * stacknext * next DT.|DT.R|DT.L)
            (sound (id towards))
            (sound (id your-dest))))))
;
; Turn Position Configuration
;
; Special Case - Tunnel Entrance
    (instruction (turn TE.|TE.R|TE.L stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ())
      (if-stack() 
        (next-significant ()
  		  (sound (id then))
 		  (sound (id in))
		  (next-significant-dist ())
          (turn-sound (pos turn))
          (if-unnamed ()
            (sound (id towards))
            (if-next-named () 
              (next-named ()
                (dpronun-base ())))
            (if-not-next-named ()
              (sound (id your-dest))))
          (if-not-unnamed ()
            (if-toward-name ()
              (sound (id towards)))
            (if-not-toward-name ()
              (transition-sound (pos turn)))
            (dpronun ())
            (if (turn * stacknext * next DT.|DT.R|DT.L)
              (sound (id towards))
              (sound (id your-dest)))))))
; Special Case - U-Turn
    (instruction (turn UT. stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id make-legal-uturn)))
; Special Case - Merge
;    (instruction (turn MR.L|MR.R stacknext * pos turn|past-turn)
;      (if-lookahead ()
;        (sound (id step))
;        (step-number ()))
;      (turn-sound ())
;      (if-unnamed ()
;        (sound (id towards))
;        (if-next-named () 
;          (next-named ()
;            (dpronun-base ())))
;        (if-not-next-named ()
;          (sound (id your-dest))))
;      (if-not-unnamed ()
;        (transition-sound ())
;        (dpronun ()))
;      (next ()
;        (sound (id for))
;        (next-named-dist ())
;        (if-next-named-dist-lt-max ()
;          (sound (id towards))
;          (if-next-named ()
;            (next-named ()
;              (dpronun-base ())))
;          (if-not-next-named ()
;            (sound (id your-dest)))))
;      (if-not-lookahead ()
;        (if-stack ()
;          (if (turn * stacknext !NC. next *)
;            (sound (id then))
;            (stack-sound (pos prepare))))))

; Arrival Cases
    (instruction (turn DT. pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id arrived-dest)))
    (instruction (turn DT.R pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id dest-right)))
    (instruction (turn DT.L pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (sound (id dest-left)))      
; Special Case - Speed cameras no pronoun - Turn SC.      
    (instruction (turn SC. stacknext * pos turn)
      (turn-sound ())
      (sound (id in))
      (speedcameraremaindist ()))
; Special Case - Speeding alert no pronoun - Turn SC.S      
    (instruction (turn SC.S pos turn)
      (turn-sound ()))

; Stack to Merge Case
    (instruction (turn * stacknext MR.L|MR.R pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (turn-sound ())
      (if-unnamed ()
        (sound (id towards))
        (if-next-named () 
          (next-named ()
            (dpronun-base ())))
        (if-not-next-named ()
          (sound (id your-dest))))
      (if-not-unnamed ()
        (transition-sound ())
        (dpronun ())))
; General Case - no prepare ferry exit in stacknext
    (instruction (turn * stacknext * pos turn|past-turn)
      (if-lookahead ()
        (sound (id step))
        (step-number ()))
      (if-iname ()  
        (sound (id continue-on))
          (opronun ())
        (sound (id intersection-with))
          (ipronun ())
        (sound (id then)))
      (turn-sound ())
      (if-unnamed ()
        (sound (id towards))
        (if-next-named () 
          (next-named ()
            (dpronun-base ())))
        (if-not-next-named ()
          (sound (id your-dest))))
      (if-not-unnamed ()
        (if-toward-name ()
          (sound (id towards)))
        (if-not-toward-name ()
          (transition-sound ()))
        (dpronun ())
        (if (turn * stacknext * next !DT.)
          (if (turn * stacknext * next !DT.R)
            (if (turn * stacknext * next !DT.L)
              (if (turn * stacknext * next !FX.)
                (if-not-lookahead ()
                  (if-stack ()
                    (if (turn * stacknext !NC. next *)
                      (sound (id then))
                      (stack-sound (pos prepare)))))))))
        (if (turn * stacknext * next DT.|DT.R|DT.L)
          (sound (id towards))
          (sound (id your-dest)))))
; Recalc Case
    (instruction (pos recalc)
      (sound (id recalc)))
; Soft Recalc Case
    (instruction (pos soft-recalc)
      (sound (id soft-recalc-tone)))
; Recalc Confirm Case
    (instruction (pos recalc-confirm)
      (sound (id recalc-confirm-tone)))
; Traffic Calc/Recalc Case
    (instruction (pos recalc-traffic)
      (sound (id calc-traffic)))
; Route Calc Case
    (instruction (pos calc)
      (sound (id calc-route)))       
; Traffic Alert Case
    (instruction (pos traffic-alert)
      (sound (id traffic-update))
      (expect-traffic ())
      (if-traffic-delay-threshold ()
        (traffic-delay ())
        (sound (id delay))))
; Traffic Delay Case
    (instruction (pos traffic-delay)
      (expect-traffic ())
      (if-traffic-delay-threshold ()
        (traffic-delay ())
        (sound (id delay)))))

; Traffic Warnings
  (section (name traffic)
    (instruction (turn TI.|TI.S stacknext * pos *)
      (turn-sound ())
      (sound (id in))
      (trafficincidentdist ())
      (if-ti-road-pronun ()
        (sound (id on))
        (ti-road-pronun ())
        (if-ti-origin-pronun ()
          (ti-origin-proximity ())
          (ti-origin-pronun ()))))
    (instruction (turn TC.|TC.S stacknext * pos *)
      (if-not-in-congestion ()
        (turn-sound ())
        (sound (id in))
        (trafficcongestiondist ())
        (if-tc-road-pronun ()
          (sound (id on))
          (tc-road-pronun ())
          (if-tc-origin-pronun ()
              (tc-origin-proximity ())
            (tc-origin-pronun ()))))
      (if-in-congestion ()
        (turn-sound ())
        (sound (id for-the-next))
        (trafficcongestionlen ())))))
      
