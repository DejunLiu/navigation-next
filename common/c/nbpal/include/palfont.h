/*
Copyright (c) 2018, TeleCommunication Systems, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the TeleCommunication Systems, Inc., nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
DISCLAIMED. IN NO EVENT SHALL TELECOMMUNICATION SYSTEMS, INC.BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*!--------------------------------------------------------------------------

    @file       palfont.h

    Functions are used to provide font configuration and application
    access.
*/
/*
    (C) Copyright 2012 by TeleCommunications Systems, Inc.

    The information contained herein is confidential, proprietary
    to TeleCommunication Systems, Inc., and considered a trade secret as
    defined in section 499C of the penal code of the State of
    California. Use of this information by anyone other than
    authorized employees of TeleCommunication Systems is granted only
    under a written non-disclosure agreement, expressly
    prescribing the scope and manner of such use.

---------------------------------------------------------------------------*/

#ifndef PALFONT_H
#define PALFONT_H

#include "paltypes.h"
#include "palerror.h"
#include "palconfig.h"
#include "pal.h"
/*!
    @addtogroup palfont
    @{
*/


typedef enum
{
    PAL_TBF_NONE       = 0,          /* not breakable */
    PAL_TBF_CHAR_BEGIN = 0x1,        /* beginning of breakable unit */
    PAL_TBF_CHAR_END   = 0x2         /* end of breakable unit */
} PAL_TEXT_BOUNDARY_FLAG;

typedef struct
{
    int32 xMin;
    int32 yMin;
    int32 xMax;
    int32 yMax;
} PAL_GlyphBoundingBox;

typedef struct 
{
    uint32                 fontId;          /* font id of the glyph */
    uint32                 glyphId;         /* unique glyphId */
    PAL_GlyphBoundingBox   boundingBox;     /* bounding box of glyph, origin is at left-top corner, in pixels */
} PAL_GlyphInfo;

typedef struct
{
    uint8*          data;            /* bitmap data, 1 byte aligned */
    uint32          width;           /* bitmap height pixels */
    uint32          height;          /* bitmap width pixels */
    int32           xOffset;         /* x offset from left-top corner, in pixels */
    int32           yOffset;         /* x offset from left-top corner, in pixels */
} PAL_GlyphBitmap;

typedef enum
{
    PAL_TA_CENTER,      /* align to center  */
    PAL_TA_LEFT,        /* align to left */
    PAL_TA_RIGHT        /* align to right */
} PAL_TEXT_ALIGN;

typedef struct PAL_Font PAL_Font;

PAL_DEC PAL_Font* PAL_FontCreate(PAL_Instance* pal);

PAL_DEC PAL_Font* PAL_FontCreateEx(PAL_Instance* pal, const char* fontFolder);

PAL_DEC void PAL_FontDestroy(PAL_Font* instance);

/** Get the glyph indices, positions and breakable info of the UTF-8 string.
    "Breakable" means it's safe to add a space between breakable glyphs without corrupt text.
    This information is used by curvy road layout algorithm.

@param pixelFontHeight   Font size in pixels
@param style             Font style(serif,bold...)
@param utf8String        Input string in UTF-8 encoding
@param lineWidth         Max pixels per line
@param align             Line alignment
@param glyphInfos        Output glyph list, with position
@param glyphCount        Output glyph list length
@param boundingBox       Output glyph list bounding box
@return Error code
*/
PAL_DEC PAL_Error PAL_FontGetComplexTextLayout(PAL_Font* instance, uint32 pixelFontHeight, const char* style, const char* utf8String, uint32 lineWidth, PAL_TEXT_ALIGN align, PAL_GlyphInfo** glyphInfos, uint32* glyphCount, PAL_GlyphBoundingBox* boundingBox);

/** Get glyph bitmap data from index generated by PAL_FontGetComplexTextLayout().
    The returned glyph bitmap should be as small as possible. 
    xOffset & yOffset values are used to adjust display positions of glyph (make sure all glyphs are aligned to base line).

@param pixelFontHeight Font size in pixels
@param fontId          Font id
@param style           Font style(serif,bold...)
@param glyphID         Unique glyph ID
@param result          Output glyph bitmap
@return Error code 
*/
PAL_DEC PAL_Error PAL_FontGetGlyphBitmap(PAL_Font* instance, uint32 pixelFontHeight, const char* style, uint32 fontId, uint32 glyphID, PAL_GlyphBitmap** result);

/** Destroy the glyph list generated by PAL_FontGetComplexTextLayout().
@param glyphInfos
@return Error code 
*/
PAL_DEC PAL_Error PAL_FontDestroyGlyphLayout(PAL_Font* instance, PAL_GlyphInfo* glyphInfos);

/** Destroy the glyph bitmap generated by PAL_FontGetGlyphBitmap().
@param glyphBitmap
@return Error code 
*/
PAL_DEC PAL_Error PAL_FontDestroyGlyphBitmap(PAL_Font* instance, PAL_GlyphBitmap* glyphBitmap);



/*! @} */

#endif  // PALFONT_H
