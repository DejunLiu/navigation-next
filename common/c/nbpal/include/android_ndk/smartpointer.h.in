/*
 * (C) Copyright 2012 by TeleCommunication Systems, Inc.
 *
 * The information contained herein is confidential, proprietary
 * to TeleCommunication Systems, Inc., and considered a trade secret
 * as defined in section 499C of the penal code of the State of
 * California. Use of this information by anyone other than
 * authorized employees of TeleCommunication Systems is granted only
 * under a written non-disclosure agreement, expressly prescribing
 * the scope and manner of such use.
 *
 */

#ifndef _SMART_POINTER_H_
#define _SMART_POINTER_H_

#cmakedefine USE_STLPORT
#ifdef USE_STLPORT

    #include <exception>
/*
    namespace std {
    struct bad_cast :  exception { bad_cast operator()(){} };
    struct bad_alloc : public exception { bad_alloc operator()(){} };
    }
*/
    namespace boost
    {
        inline void throw_exception(std::exception const&) {}
    }
    #include <boost/shared_ptr.hpp>

#else

    #include <tr1/memory>

#endif // USE_STLPORT

#include <string>
#include <algorithm>            // for std::swap
#include <functional>           // for std::less
#include <typeinfo>             // for std::bad_cast
#include <cstddef>              // for std::size_t

using namespace std;

#ifndef USE_STLPORT
using namespace std::tr1;
#endif

static char EMPTY_STRING[] = "";

#ifndef CHAR_PTR_TO_UTF_STRING_PTR
#define CHAR_PTR_TO_UTF_STRING_PTR(n) shared_ptr<string>(new std::string(n))  //n should be 'char*' type
#endif

#endif
